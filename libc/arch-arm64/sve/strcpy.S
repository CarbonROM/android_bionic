/*
 * strcpy/stpcpy - copy a string returning pointer to start/end.
 *
 * Copyright (c) 2018, Linaro Limited
 * All rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the company nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Assumptions:
 *
 * ARMv8-a, AArch64
 * SVE Available.
 */

#include <private/bionic_asm.h>

ENTRY(strcpy)
	.arch	armv8-a+sve
	.text
	.globl	FUNC
	.type	FUNC, %function
	.p2align 4
FUNC:
	setffr				/* initialize FFR */
	ptrue	p2.b, all		/* all ones; loop invariant */
	mov	x2, 0			/* initialize offset */

	.p2align 4
	/* Read a vector's worth of bytes, stopping on first fault.  */
0:	ldff1b	z0.b, p2/z, [x1, x2]
	rdffrs	p0.b, p2/z
	b.nlast	1f

	/* First fault did not fail: the whole vector is valid.
	   Avoid depending on the contexts of FFR beyond the branch.  */
	cmpeq	p1.b, p2/z, z0.b, 0	/* search for zeros */
	b.any	2f

	/* No zero found.  Store the whole vector and loop.  */
	st1b	z0.b, p2, [x0, x2]
	incb	x2, all
	b	0b

	/* First fault failed: only some of the vector is valid.
	   Perform the comparison only on the valid bytes.  */
1:	cmpeq	p1.b, p0/z, z0.b, 0	/* search for zeros */
	b.any	2f

	/* No zero found.  Store the valid portion of the vector and loop.  */
	setffr				/* re-init FFR */
	st1b	z0.b, p0, [x0, x2]
	incp	x2, p0.b
	b	0b

	/* Zero found.  Crop the vector to the found zero and finish.  */
2:	brka	p0.b, p2/z, p1.b
	st1b	z0.b, p0, [x0, x2]
	ret

	.size	strcpy, . - strcpy
END(strcpy)
